{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _invariant=_interopRequireDefault(require(\"../utils/invariant\"));var _getScreenForRouteName=_interopRequireDefault(require(\"./getScreenForRouteName\"));var _validateScreenOptions=_interopRequireDefault(require(\"./validateScreenOptions\"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function applyConfig(configurer,navigationOptions,configProps){if(typeof configurer==='function'){return _objectSpread(_objectSpread({},navigationOptions),configurer(_objectSpread(_objectSpread({},configProps),{},{navigationOptions:navigationOptions})));}if(typeof configurer==='object'){return _objectSpread(_objectSpread({},navigationOptions),configurer);}return navigationOptions;}var _default=function _default(routeConfigs,navigatorScreenConfig){return function(navigation,screenProps,theme){var state=navigation.state;var route=state;(0,_invariant.default)(route.routeName&&typeof route.routeName==='string','Cannot get config because the route does not have a routeName.');var Component=(0,_getScreenForRouteName.default)(routeConfigs,route.routeName);var routeConfig=routeConfigs[route.routeName];var routeScreenConfig=routeConfig===Component?null:routeConfig.navigationOptions;var componentScreenConfig=Component.navigationOptions;var configOptions={navigation:navigation,screenProps:screenProps||{},theme:theme};var outputConfig=applyConfig(navigatorScreenConfig,{},configOptions);outputConfig=applyConfig(componentScreenConfig,outputConfig,configOptions);outputConfig=applyConfig(routeScreenConfig,outputConfig,configOptions);(0,_validateScreenOptions.default)(outputConfig,route);return outputConfig;};};exports.default=_default;","map":{"version":3,"sources":["createConfigGetter.js"],"names":["configurer","navigationOptions","state","route","invariant","Component","getScreenForRouteName","routeConfig","routeConfigs","routeScreenConfig","componentScreenConfig","configOptions","navigation","screenProps","theme","outputConfig","applyConfig","validateScreenOptions"],"mappings":"iQAAA,qEAEA,sFACA,sF,yyBAEA,QAAA,CAAA,WAAA,CAAA,UAAA,CAAA,iBAAA,CAAA,WAAA,CAAiE,CAC/D,GAAI,MAAA,CAAA,UAAA,GAAJ,UAAA,CAAsC,CACpC,sCAAO,iBAAP,EAEKA,UAAU,gCAAC,WAAD,MAEXC,iBAAAA,CAAAA,iBAFW,GAFf,EAOD,CACD,GAAI,MAAA,CAAA,UAAA,GAAJ,QAAA,CAAoC,CAClC,sCAAO,iBAAP,EAEKD,UAFL,EAID,CACD,MAAA,CAAA,iBAAA,CACD,C,aAEc,kBAAA,YAAA,CAAA,qBAAA,QAAyC,UAAA,UAAA,CAAA,WAAA,CAAA,KAAA,CAInD,IACKE,CAAAA,KADL,CACH,UADG,CACKA,KADL,CAEH,GAAMC,CAAAA,KAAK,CAAX,KAAA,CAEAC,uBACED,KAAK,CAALA,SAAAA,EAAmB,MAAOA,CAAAA,KAAK,CAAZ,SAAA,GADZ,QAATC,CAAAA,gEAAAA,EAKA,GAAMC,CAAAA,SAAS,CAAGC,mCAAqB,YAArBA,CAAoCH,KAAK,CAA3D,SAAkBG,CAAlB,CAEA,GAAMC,CAAAA,WAAW,CAAGC,YAAY,CAACL,KAAK,CAAtC,SAAgC,CAAhC,CAEA,GAAMM,CAAAA,iBAAiB,CACrBF,WAAW,GAAXA,SAAAA,CAAAA,IAAAA,CAAmCA,WAAW,CADhD,iBAAA,CAEA,GAAMG,CAAAA,qBAAqB,CAAGL,SAAS,CAAvC,iBAAA,CAEA,GAAMM,CAAAA,aAAa,CAAG,CAAEC,UAAF,CAAEA,UAAF,CAAcC,WAAW,CAAEA,WAAW,EAAtC,EAAA,CAA8CC,KAAAA,CAAAA,KAA9C,CAAtB,CAEA,GAAIC,CAAAA,YAAY,CAAGC,WAAW,CAAA,qBAAA,CAAA,EAAA,CAA9B,aAA8B,CAA9B,CACAD,YAAY,CAAGC,WAAW,CAAA,qBAAA,CAAA,YAAA,CAA1BD,aAA0B,CAA1BA,CAKAA,YAAY,CAAGC,WAAW,CAAA,iBAAA,CAAA,YAAA,CAA1BD,aAA0B,CAA1BA,CAEAE,mCAAqB,YAArBA,CAAAA,KAAAA,EAEA,MAAA,CAAA,YAAA,CAjCF,CAAe,E","sourcesContent":["import invariant from '../utils/invariant';\n\nimport getScreenForRouteName from './getScreenForRouteName';\nimport validateScreenOptions from './validateScreenOptions';\n\nfunction applyConfig(configurer, navigationOptions, configProps) {\n  if (typeof configurer === 'function') {\n    return {\n      ...navigationOptions,\n      ...configurer({\n        ...configProps,\n        navigationOptions,\n      }),\n    };\n  }\n  if (typeof configurer === 'object') {\n    return {\n      ...navigationOptions,\n      ...configurer,\n    };\n  }\n  return navigationOptions;\n}\n\nexport default (routeConfigs, navigatorScreenConfig) => (\n  navigation,\n  screenProps,\n  theme\n) => {\n  const { state } = navigation;\n  const route = state;\n\n  invariant(\n    route.routeName && typeof route.routeName === 'string',\n    'Cannot get config because the route does not have a routeName.'\n  );\n\n  const Component = getScreenForRouteName(routeConfigs, route.routeName);\n\n  const routeConfig = routeConfigs[route.routeName];\n\n  const routeScreenConfig =\n    routeConfig === Component ? null : routeConfig.navigationOptions;\n  const componentScreenConfig = Component.navigationOptions;\n\n  const configOptions = { navigation, screenProps: screenProps || {}, theme };\n\n  let outputConfig = applyConfig(navigatorScreenConfig, {}, configOptions);\n  outputConfig = applyConfig(\n    componentScreenConfig,\n    outputConfig,\n    configOptions\n  );\n  outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);\n\n  validateScreenOptions(outputConfig, route);\n\n  return outputConfig;\n};\n"]},"metadata":{},"sourceType":"script"}