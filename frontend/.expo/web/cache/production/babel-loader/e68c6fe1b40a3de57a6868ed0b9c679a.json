{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _networking=_interopRequireDefault(require(\"../networking\"));var _whitelist=require(\"../utils/whitelist\");var _camel=require(\"../utils/camel\");var _authError=_interopRequireDefault(require(\"./authError\"));var _auth0Error=_interopRequireDefault(require(\"./auth0Error\"));function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function responseHandler(response){var exceptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(response.ok&&response.json){return(0,_camel.toCamelCase)(response.json,exceptions);}throw new _authError.default(response);}var Auth=function(){function Auth(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};(0,_classCallCheck2.default)(this,Auth);this.client=new _networking.default(options);var clientId=options.clientId;if(!clientId){throw new Error('Missing clientId in parameters');}this.domain=this.client.domain;this.clientId=clientId;}(0,_createClass2.default)(Auth,[{key:\"authorizeUrl\",value:function authorizeUrl(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var query=(0,_whitelist.apply)({parameters:{redirectUri:{required:true,toName:'redirect_uri'},responseType:{required:true,toName:'response_type'},state:{required:true}},whitelist:false},parameters);return this.client.url('/authorize',_objectSpread(_objectSpread({},query),{},{client_id:this.clientId}),true);}},{key:\"logoutUrl\",value:function logoutUrl(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var query=(0,_whitelist.apply)({parameters:{federated:{required:false},clientId:{required:false,toName:'client_id'},returnTo:{required:false}}},parameters);return this.client.url('/v2/logout',_objectSpread({},query),true);}},{key:\"exchange\",value:function exchange(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{code:{required:true},verifier:{required:true,toName:'code_verifier'},redirectUri:{required:true,toName:'redirect_uri'}}},parameters);return this.client.post('/oauth/token',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId,grant_type:'authorization_code'})).then(responseHandler);}},{key:\"exchangeNativeSocial\",value:function exchangeNativeSocial(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{subjectToken:{required:true,toName:'subject_token'},subjectTokenType:{required:true,toName:'subject_token_type'},userProfile:{required:false,toName:'user_profile'},audience:{required:false},scope:{required:false}}},parameters);return this.client.post('/oauth/token',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId,grant_type:'urn:ietf:params:oauth:grant-type:token-exchange'})).then(responseHandler);}},{key:\"passwordRealm\",value:function passwordRealm(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{username:{required:true},password:{required:true},realm:{required:true},audience:{required:false},scope:{required:false}}},parameters);return this.client.post('/oauth/token',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId,grant_type:'http://auth0.com/oauth/grant-type/password-realm'})).then(responseHandler);}},{key:\"refreshToken\",value:function refreshToken(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{refreshToken:{required:true,toName:'refresh_token'},scope:{required:false}}},parameters);return this.client.post('/oauth/token',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId,grant_type:'refresh_token'})).then(responseHandler);}},{key:\"passwordlessWithEmail\",value:function passwordlessWithEmail(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{email:{required:true},send:{required:false},authParams:{required:false}}},parameters);return this.client.post('/passwordless/start',_objectSpread(_objectSpread({},payload),{},{connection:'email',client_id:this.clientId})).then(responseHandler);}},{key:\"passwordlessWithSMS\",value:function passwordlessWithSMS(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{phoneNumber:{required:true,toName:'phone_number'},send:{required:false},authParams:{required:false}}},parameters);return this.client.post('/passwordless/start',_objectSpread(_objectSpread({},payload),{},{connection:'sms',client_id:this.clientId})).then(responseHandler);}},{key:\"loginWithEmail\",value:function loginWithEmail(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{email:{required:true,toName:'username'},code:{required:true,toName:'otp'},audience:{required:false},scope:{required:false}}},parameters);return this.client.post('/oauth/token',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId,realm:'email',grant_type:'http://auth0.com/oauth/grant-type/passwordless/otp'})).then(responseHandler);}},{key:\"loginWithSMS\",value:function loginWithSMS(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{phoneNumber:{required:true,toName:'username'},code:{required:true,toName:'otp'},audience:{required:false},scope:{required:false}}},parameters);return this.client.post('/oauth/token',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId,realm:'sms',grant_type:'http://auth0.com/oauth/grant-type/passwordless/otp'})).then(responseHandler);}},{key:\"revoke\",value:function revoke(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{refreshToken:{required:true,toName:'token'}}},parameters);return this.client.post('/oauth/revoke',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId})).then(function(response){if(response.ok){return{};}throw new _authError.default(response);});}},{key:\"userInfo\",value:function userInfo(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{token:{required:true}}},parameters);var _this$client=this.client,baseUrl=_this$client.baseUrl,telemetry=_this$client.telemetry;var client=new _networking.default({baseUrl:baseUrl,telemetry:telemetry,token:payload.token});var claims=['sub','name','given_name','family_name','middle_name','nickname','preferred_username','profile','picture','website','email','email_verified','gender','birthdate','zoneinfo','locale','phone_number','phone_number_verified','address','updated_at'];return client.get('/userinfo').then(function(response){return responseHandler(response,{attributes:claims,whitelist:true});});}},{key:\"resetPassword\",value:function resetPassword(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{email:{required:true},connection:{required:true}}},parameters);return this.client.post('/dbconnections/change_password',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId})).then(function(response){if(response.ok){return{};}throw new _authError.default(response);});}},{key:\"createUser\",value:function createUser(){var parameters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var payload=(0,_whitelist.apply)({parameters:{email:{required:true},password:{required:true},connection:{required:true},username:{required:false},metadata:{required:false,toName:'user_metadata'}}},parameters);return this.client.post('/dbconnections/signup',_objectSpread(_objectSpread({},payload),{},{client_id:this.clientId})).then(function(response){if(response.ok&&response.json){return(0,_camel.toCamelCase)(response.json);}throw new _auth0Error.default(response);});}}]);return Auth;}();exports.default=Auth;","map":{"version":3,"sources":["/Users/diannamcallister/Desktop/spotstitch/frontend/node_modules/react-native-auth0/src/auth/index.js"],"names":["responseHandler","response","exceptions","ok","json","AuthError","Auth","options","client","Client","clientId","Error","domain","parameters","query","redirectUri","required","toName","responseType","state","whitelist","url","client_id","federated","returnTo","payload","code","verifier","post","grant_type","then","subjectToken","subjectTokenType","userProfile","audience","scope","username","password","realm","refreshToken","email","send","authParams","connection","phoneNumber","token","baseUrl","telemetry","claims","get","attributes","metadata","Auth0Error"],"mappings":"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","sourcesContent":["import Client from '../networking';\nimport {apply} from '../utils/whitelist';\nimport {toCamelCase} from '../utils/camel';\nimport AuthError from './authError';\nimport Auth0Error from './auth0Error';\n\nfunction responseHandler(response, exceptions = {}) {\n  if (response.ok && response.json) {\n    return toCamelCase(response.json, exceptions);\n  }\n  throw new AuthError(response);\n}\n\n/**\n * Auth0 Auth API\n *\n * @export Auth\n * @see https://auth0.com/docs/api/authentication\n * @class Auth\n */\nexport default class Auth {\n  constructor(options = {}) {\n    this.client = new Client(options);\n    const {clientId} = options;\n    if (!clientId) {\n      throw new Error('Missing clientId in parameters');\n    }\n    this.domain = this.client.domain;\n    this.clientId = clientId;\n  }\n\n  /**\n   * Builds the full authorize endpoint url in the Authorization Server (AS) with given parameters.\n   *\n   * @param {Object} parameters parameters to send to `/authorize`\n   * @param {String} parameters.responseType type of the response to get from `/authorize`.\n   * @param {String} parameters.redirectUri where the AS will redirect back after success or failure.\n   * @param {String} parameters.state random string to prevent CSRF attacks.\n   * @returns {String} authorize url with specified parameters to redirect to for AuthZ/AuthN.\n   * @see https://auth0.com/docs/api/authentication#authorize-client\n   *\n   * @memberof Auth\n   */\n  authorizeUrl(parameters = {}) {\n    const query = apply(\n      {\n        parameters: {\n          redirectUri: {required: true, toName: 'redirect_uri'},\n          responseType: {required: true, toName: 'response_type'},\n          state: {required: true},\n        },\n        whitelist: false,\n      },\n      parameters,\n    );\n    return this.client.url(\n      '/authorize',\n      {...query, client_id: this.clientId},\n      true,\n    );\n  }\n\n  /**\n   * Builds the full logout endpoint url in the Authorization Server (AS) with given parameters.\n   *\n   * @param {Object} parameters parameters to send to `/v2/logout`\n   * @param {Boolean} [parameters.federated] if the logout should include removing session for federated IdP.\n   * @param {String} [parameters.clientId] client identifier of the one requesting the logout\n   * @param {String} [parameters.returnTo] url where the user is redirected to after logout. It must be declared in you Auth0 Dashboard\n   * @returns {String} logout url with specified parameters\n   * @see https://auth0.com/docs/api/authentication#logout\n   *\n   * @memberof Auth\n   */\n  logoutUrl(parameters = {}) {\n    const query = apply(\n      {\n        parameters: {\n          federated: {required: false},\n          clientId: {required: false, toName: 'client_id'},\n          returnTo: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client.url('/v2/logout', {...query}, true);\n  }\n\n  /**\n   * Exchanges a code obtained via `/authorize` (w/PKCE) for the user's tokens\n   *\n   * @param {Object} parameters parameters used to obtain tokens from a code\n   * @param {String} parameters.code code returned by `/authorize`.\n   * @param {String} parameters.redirectUri original redirectUri used when calling `/authorize`.\n   * @param {String} parameters.verifier value used to generate the code challenge sent to `/authorize`.\n   * @returns {Promise}\n   * @see https://auth0.com/docs/api-auth/grant/authorization-code-pkce\n   *\n   * @memberof Auth\n   */\n  exchange(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          code: {required: true},\n          verifier: {required: true, toName: 'code_verifier'},\n          redirectUri: {required: true, toName: 'redirect_uri'},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'authorization_code',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Exchanges an external token obtained via a native social authentication solution for the user's tokens\n   *\n   * @param {Object} parameters parameters used to obtain user tokens from an external provider's token\n   * @param {String} parameters.subjectToken token returned by the native social authentication solution\n   * @param {String} parameters.subjectTokenType identifier that indicates the native social authentication solution\n   * @param {Object} [parameters.userProfile] additional profile attributes to set or override, only on select native social authentication solutions\n   * @param {String} [parameters.audience] API audience to request\n   * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n   * @returns {Promise}\n   *\n   * @see https://auth0.com/docs/api/authentication#token-exchange-for-native-social\n   *\n   * @memberof Auth\n   */\n  exchangeNativeSocial(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          subjectToken: {required: true, toName: 'subject_token'},\n          subjectTokenType: {required: true, toName: 'subject_token_type'},\n          userProfile: {required: false, toName: 'user_profile'},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'urn:ietf:params:oauth:grant-type:token-exchange',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Performs Auth with user credentials using the Password Realm Grant\n   *\n   * @param {Object} parameters password realm parameters\n   * @param {String} parameters.username user's username or email\n   * @param {String} parameters.password user's password\n   * @param {String} parameters.realm name of the Realm where to Auth (or connection name)\n   * @param {String} [parameters.audience] identifier of Resource Server (RS) to be included as audience (aud claim) of the issued access token\n   * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n   * @returns {Promise}\n   * @see https://auth0.com/docs/api-auth/grant/password#realm-support\n   *\n   * @memberof Auth\n   */\n  passwordRealm(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          username: {required: true},\n          password: {required: true},\n          realm: {required: true},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'http://auth0.com/oauth/grant-type/password-realm',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Obtain new tokens using the Refresh Token obtained during Auth (requesting `offline_access` scope)\n   *\n   * @param {Object} parameters refresh token parameters\n   * @param {String} parameters.refreshToken user's issued refresh token\n   * @param {String} [parameters.scope] scopes requested for the issued tokens. e.g. `openid profile`\n   * @returns {Promise}\n   * @see https://auth0.com/docs/tokens/refresh-token/current#use-a-refresh-token\n   *\n   * @memberof Auth\n   */\n  refreshToken(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          refreshToken: {required: true, toName: 'refresh_token'},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        grant_type: 'refresh_token',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Starts the Passworldess flow with an email connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.email the email to send the link/code to\n   * @param {String} parameters.send the passwordless strategy, either 'link' or 'code'\n   * @param {String} parameters.authParams optional parameters, used when strategy is 'linḱ'\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  passwordlessWithEmail(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true},\n          send: {required: false},\n          authParams: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/passwordless/start', {\n        ...payload,\n        connection: 'email',\n        client_id: this.clientId,\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Starts the Passworldess flow with an SMS connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.phoneNumber the phone number to send the link/code to\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  passwordlessWithSMS(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          phoneNumber: {required: true, toName: 'phone_number'},\n          send: {required: false},\n          authParams: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/passwordless/start', {\n        ...payload,\n        connection: 'sms',\n        client_id: this.clientId,\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Finishes the Passworldess authentication with an email connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.email the email where the link/code was received\n   * @param {String} parameters.code the code numeric value (OTP)\n   * @param {String} parameters.audience optional API audience to request\n   * @param {String} parameters.scope optional scopes to request\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  loginWithEmail(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true, toName: 'username'},\n          code: {required: true, toName: 'otp'},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        realm: 'email',\n        grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Finishes the Passworldess authentication with an SMS connection\n   *\n   * @param {Object} parameters passwordless parameters\n   * @param {String} parameters.phoneNumber the phone number where the code was received\n   * @param {String} parameters.code the code numeric value (OTP)\n   * @param {String} parameters.audience optional API audience to request\n   * @param {String} parameters.scope optional scopes to request\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  loginWithSMS(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          phoneNumber: {required: true, toName: 'username'},\n          code: {required: true, toName: 'otp'},\n          audience: {required: false},\n          scope: {required: false},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/token', {\n        ...payload,\n        client_id: this.clientId,\n        realm: 'sms',\n        grant_type: 'http://auth0.com/oauth/grant-type/passwordless/otp',\n      })\n      .then(responseHandler);\n  }\n\n  /**\n   * Revoke an issued refresh token\n   *\n   * @param {Object} parameters revoke token parameters\n   * @param {String} parameters.refreshToken user's issued refresh token\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  revoke(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          refreshToken: {required: true, toName: 'token'},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/oauth/revoke', {\n        ...payload,\n        client_id: this.clientId,\n      })\n      .then(response => {\n        if (response.ok) {\n          return {};\n        }\n        throw new AuthError(response);\n      });\n  }\n\n  /**\n   * Return user information using an access token\n   *\n   * @param {Object} parameters user info parameters\n   * @param {String} parameters.token user's access token\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  userInfo(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          token: {required: true},\n        },\n      },\n      parameters,\n    );\n    const {baseUrl, telemetry} = this.client;\n    const client = new Client({baseUrl, telemetry, token: payload.token});\n    const claims = [\n      'sub',\n      'name',\n      'given_name',\n      'family_name',\n      'middle_name',\n      'nickname',\n      'preferred_username',\n      'profile',\n      'picture',\n      'website',\n      'email',\n      'email_verified',\n      'gender',\n      'birthdate',\n      'zoneinfo',\n      'locale',\n      'phone_number',\n      'phone_number_verified',\n      'address',\n      'updated_at',\n    ];\n    return client\n      .get('/userinfo')\n      .then(response =>\n        responseHandler(response, {attributes: claims, whitelist: true}),\n      );\n  }\n\n  /**\n   * Request an email with instructions to change password of a user\n   *\n   * @param {Object} parameters reset password parameters\n   * @param {String} parameters.email user's email\n   * @param {String} parameters.connection name of the connection of the user\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  resetPassword(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true},\n          connection: {required: true},\n        },\n      },\n      parameters,\n    );\n    return this.client\n      .post('/dbconnections/change_password', {\n        ...payload,\n        client_id: this.clientId,\n      })\n      .then(response => {\n        if (response.ok) {\n          return {};\n        }\n        throw new AuthError(response);\n      });\n  }\n\n  /**\n   *\n   *\n   * @param {Object} parameters create user parameters\n   * @param {String} parameters.email user's email\n   * @param {String} [parameters.username] user's username\n   * @param {String} parameters.password user's password\n   * @param {String} parameters.connection name of the database connection where to create the user\n   * @param {String} [parameters.metadata] additional user information that will be stored in `user_metadata`\n   * @returns {Promise}\n   *\n   * @memberof Auth\n   */\n  createUser(parameters = {}) {\n    const payload = apply(\n      {\n        parameters: {\n          email: {required: true},\n          password: {required: true},\n          connection: {required: true},\n          username: {required: false},\n          metadata: {required: false, toName: 'user_metadata'},\n        },\n      },\n      parameters,\n    );\n\n    return this.client\n      .post('/dbconnections/signup', {\n        ...payload,\n        client_id: this.clientId,\n      })\n      .then(response => {\n        if (response.ok && response.json) {\n          return toCamelCase(response.json);\n        }\n        throw new Auth0Error(response);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}