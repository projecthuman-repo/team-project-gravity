{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _jsbn=require(\"jsbn\");var _sha=_interopRequireDefault(require(\"crypto-js/sha256\"));var digestInfoHead={sha256:'3031300d060960864801650304020105000420'};var digestAlgs={sha256:_sha.default};function RSAVerifier(modulus,exp){this.n=null;this.e=0;if(modulus&&modulus.length>0&&exp&&exp.length>0){this.n=new _jsbn.BigInteger(modulus,16);this.e=parseInt(exp,16);}else{throw new Error('Invalid key data');}}function getAlgorithmFromDigest(hDigestInfo){for(var algName in digestInfoHead){var head=digestInfoHead[algName];var len=head.length;if(hDigestInfo.substring(0,len)===head){return{alg:algName,hash:hDigestInfo.substring(len)};}}return[];}RSAVerifier.prototype.verify=function(msg,encodedSignature){var decodedSignature=encodedSignature.replace(/[^0-9a-f]|[\\s\\n]]/gi,'');var signature=new _jsbn.BigInteger(decodedSignature,16);if(signature.bitLength()>this.n.bitLength()){return false;}var decryptedSignature=signature.modPowInt(this.e,this.n);var digest=decryptedSignature.toString(16).replace(/^1f+00/,'');var digestInfo=getAlgorithmFromDigest(digest);if(digestInfo.length===0){return false;}if(!digestAlgs.hasOwnProperty(digestInfo.alg)){return false;}var msgHash=digestAlgs[digestInfo.alg](msg).toString();return digestInfo.hash===msgHash;};var _default=RSAVerifier;exports.default=_default;","map":{"version":3,"sources":["/Users/diannamcallister/Desktop/spotstitch/frontend/node_modules/react-native-auth0/src/jwt/rsa-verifier.js"],"names":["digestInfoHead","sha256","digestAlgs","SHA256","RSAVerifier","modulus","exp","n","e","length","BigInteger","parseInt","Error","getAlgorithmFromDigest","hDigestInfo","algName","head","len","substring","alg","hash","prototype","verify","msg","encodedSignature","decodedSignature","replace","signature","bitLength","decryptedSignature","modPowInt","digest","toString","digestInfo","hasOwnProperty","msgHash"],"mappings":"mKAMA,0BACA,6DAEA,GAAMA,CAAAA,cAAc,CAAG,CACrBC,MAAM,CAAE,wCADa,CAAvB,CAIA,GAAMC,CAAAA,UAAU,CAAG,CACjBD,MAAM,CAAEE,YADS,CAAnB,CAIA,QAASC,CAAAA,WAAT,CAAqBC,OAArB,CAA8BC,GAA9B,CAAmC,CACjC,KAAKC,CAAL,CAAS,IAAT,CACA,KAAKC,CAAL,CAAS,CAAT,CAEA,GAAIH,OAAO,EAAIA,OAAO,CAACI,MAAR,CAAiB,CAA5B,EAAiCH,GAAjC,EAAwCA,GAAG,CAACG,MAAJ,CAAa,CAAzD,CAA4D,CAC1D,KAAKF,CAAL,CAAS,GAAIG,iBAAJ,CAAeL,OAAf,CAAwB,EAAxB,CAAT,CACA,KAAKG,CAAL,CAASG,QAAQ,CAACL,GAAD,CAAM,EAAN,CAAjB,CACD,CAHD,IAGO,CACL,KAAM,IAAIM,CAAAA,KAAJ,CAAU,kBAAV,CAAN,CACD,CACF,CAED,QAASC,CAAAA,sBAAT,CAAgCC,WAAhC,CAA6C,CAC3C,IAAK,GAAIC,CAAAA,OAAT,GAAoBf,CAAAA,cAApB,CAAoC,CAClC,GAAMgB,CAAAA,IAAI,CAAGhB,cAAc,CAACe,OAAD,CAA3B,CACA,GAAME,CAAAA,GAAG,CAAGD,IAAI,CAACP,MAAjB,CAEA,GAAIK,WAAW,CAACI,SAAZ,CAAsB,CAAtB,CAAyBD,GAAzB,IAAkCD,IAAtC,CAA4C,CAC1C,MAAO,CACLG,GAAG,CAAEJ,OADA,CAELK,IAAI,CAAEN,WAAW,CAACI,SAAZ,CAAsBD,GAAtB,CAFD,CAAP,CAID,CACF,CACD,MAAO,EAAP,CACD,CAEDb,WAAW,CAACiB,SAAZ,CAAsBC,MAAtB,CAA+B,SAASC,GAAT,CAAcC,gBAAd,CAAgC,CAC7D,GAAMC,CAAAA,gBAAgB,CAAGD,gBAAgB,CAACE,OAAjB,CAAyB,qBAAzB,CAAgD,EAAhD,CAAzB,CAEA,GAAMC,CAAAA,SAAS,CAAG,GAAIjB,iBAAJ,CAAee,gBAAf,CAAiC,EAAjC,CAAlB,CACA,GAAIE,SAAS,CAACC,SAAV,GAAwB,KAAKrB,CAAL,CAAOqB,SAAP,EAA5B,CAAgD,CAE9C,MAAO,MAAP,CACD,CAED,GAAMC,CAAAA,kBAAkB,CAAGF,SAAS,CAACG,SAAV,CAAoB,KAAKtB,CAAzB,CAA4B,KAAKD,CAAjC,CAA3B,CACA,GAAMwB,CAAAA,MAAM,CAAGF,kBAAkB,CAACG,QAAnB,CAA4B,EAA5B,EAAgCN,OAAhC,CAAwC,QAAxC,CAAkD,EAAlD,CAAf,CAEA,GAAMO,CAAAA,UAAU,CAAGpB,sBAAsB,CAACkB,MAAD,CAAzC,CACA,GAAIE,UAAU,CAACxB,MAAX,GAAsB,CAA1B,CAA6B,CAE3B,MAAO,MAAP,CACD,CAED,GAAI,CAACP,UAAU,CAACgC,cAAX,CAA0BD,UAAU,CAACd,GAArC,CAAL,CAAgD,CAE9C,MAAO,MAAP,CACD,CAED,GAAMgB,CAAAA,OAAO,CAAGjC,UAAU,CAAC+B,UAAU,CAACd,GAAZ,CAAV,CAA2BI,GAA3B,EAAgCS,QAAhC,EAAhB,CACA,MAAOC,CAAAA,UAAU,CAACb,IAAX,GAAoBe,OAA3B,CACD,CAzBD,C,aA2Be/B,W","sourcesContent":["/*\nBased on the work of Tom Wu\nhttp://www-cs-students.stanford.edu/~tjw/jsbn/\nhttp://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE\n*/\n\nimport {BigInteger} from 'jsbn';\nimport SHA256 from 'crypto-js/sha256';\n\nconst digestInfoHead = {\n  sha256: '3031300d060960864801650304020105000420',\n};\n\nconst digestAlgs = {\n  sha256: SHA256,\n};\n\nfunction RSAVerifier(modulus, exp) {\n  this.n = null;\n  this.e = 0;\n\n  if (modulus && modulus.length > 0 && exp && exp.length > 0) {\n    this.n = new BigInteger(modulus, 16);\n    this.e = parseInt(exp, 16);\n  } else {\n    throw new Error('Invalid key data');\n  }\n}\n\nfunction getAlgorithmFromDigest(hDigestInfo) {\n  for (let algName in digestInfoHead) {\n    const head = digestInfoHead[algName];\n    const len = head.length;\n\n    if (hDigestInfo.substring(0, len) === head) {\n      return {\n        alg: algName,\n        hash: hDigestInfo.substring(len),\n      };\n    }\n  }\n  return [];\n}\n\nRSAVerifier.prototype.verify = function(msg, encodedSignature) {\n  const decodedSignature = encodedSignature.replace(/[^0-9a-f]|[\\s\\n]]/gi, '');\n\n  const signature = new BigInteger(decodedSignature, 16);\n  if (signature.bitLength() > this.n.bitLength()) {\n    //Signature does not match with the key modulus.\n    return false;\n  }\n\n  const decryptedSignature = signature.modPowInt(this.e, this.n);\n  const digest = decryptedSignature.toString(16).replace(/^1f+00/, '');\n\n  const digestInfo = getAlgorithmFromDigest(digest);\n  if (digestInfo.length === 0) {\n    //Hashing algorithm is not found\n    return false;\n  }\n\n  if (!digestAlgs.hasOwnProperty(digestInfo.alg)) {\n    //Hashing algorithm is not supported\n    return false;\n  }\n\n  const msgHash = digestAlgs[digestInfo.alg](msg).toString();\n  return digestInfo.hash === msgHash;\n};\n\nexport default RSAVerifier;\n"]},"metadata":{},"sourceType":"script"}